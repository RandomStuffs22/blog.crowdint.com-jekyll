<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Crowd Interactive Tech Blog</title>
 <link href="http://blog.crowdint.com/atom.xml" rel="self"/>
 <link href="http://blog.crowdint.com/"/>
 <updated>2012-02-06T08:55:12-08:00</updated>
 <id>http://blog.crowdint.com/</id>
 
 
 <entry>
   <title>MagmaRails 2012 Announced</title>
   <link href="http://blog.crowdint.com/2012/02/06/magmarails-2012-announced.html"/>
   <updated>2012-02-06T00:00:00-08:00</updated>
   <id>http://blog.crowdint.com/2012/02/06/magmarails-2012-announced</id>
   <photo>2ae35d2e0dfd4ca72c07ead1eec4a8f7</photo>
   <content type="html">&lt;p&gt;MagmaRails Round 3 has been announced for this year, this time it will happen
from &lt;em&gt;June 6 - 8&lt;/em&gt; in the beautiful city of Manzanillo, Colima.&lt;/p&gt;

&lt;p&gt;After the forces of nature made us cancel and hold a smaller event for
Round 2, this new date will have much better weather conditions
to have a great conference.&lt;/p&gt;

&lt;p&gt;Between the confirmed keynoters we have:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Aaron Patterson (Aaron Patterson) from AT&amp;amp;T Interactive&lt;/li&gt;
&lt;li&gt;Scott Chacon (Scott Chacon) from &lt;a href=&quot;http://www.github.com&quot;&gt;Gitgub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Dr Nic (Dr Nic Williams) from &lt;a href=&quot;http://www.engineyard.com&quot;&gt;EngineYard&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;And many more speakers from Ruby/Rails world.&lt;/p&gt;

&lt;p&gt;Also we will have workshops from basic to intermediate levels for anyone
that wants to learn Ruby/Ruby On Rails.&lt;/p&gt;

&lt;p&gt;Check out the @magmarails website for more
details: &lt;a href=&quot;http://www.magmarails.com/#main&quot;&gt;http://magmarails.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Also, if you are a speaker and want to take part of MagmaRails, we have re-opened
our &lt;a href=&quot;http://www.magmarails.com/#cfp&quot;&gt;call for papers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, Github is one of our main sponsors, but if you or your company is
interested in sponsoring MagmaRails you are welcome to request our
prospectus: &lt;a href=&quot;http://sponspors.magmarails.com&quot;&gt;http://sponsors.magmarails.com/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See you in Manzanillo!&lt;/p&gt;
</content>
   <author>
     <name>Mario Chavez</name>
     <email>mac@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Twitter's Bootstrap in the Asset Pipeline</title>
   <link href="http://blog.crowdint.com/2012/02/03/bootstrap-in-the-asset-pipeline.html"/>
   <updated>2012-02-03T00:00:00-08:00</updated>
   <id>http://blog.crowdint.com/2012/02/03/bootstrap-in-the-asset-pipeline</id>
   <photo>d32b52ec6403614b1adf3e648cbbe584</photo>
   <content type="html">&lt;p&gt;Hello. We're in February already. We've been so unbelievable busy at
&lt;a href=&quot;http://www.crowdint.com&quot;&gt;Crowd Interactive&lt;/a&gt; that we almost forgot about
our blog, but worry not, we're back.&lt;/p&gt;

&lt;p&gt;So, you've probably heard about
&lt;a href=&quot;http://twitter.github.com/bootstrap/&quot;&gt;Twitter's Bootstrap&lt;/a&gt;, the new hotness
when it comes to CSS frameworks.&lt;/p&gt;

&lt;p&gt;I've been using it for a couple of websites where design doesn't really matter
and it has really helped me make them look good without too much effort. I even
&lt;a href=&quot;https://github.com/dabit/bootstrap-form&quot;&gt;wrote a gem&lt;/a&gt; to make forms look good
even faster, though, since &lt;a href=&quot;https://github.com/plataformatec/simple_form&quot;&gt;SimpleForm&lt;/a&gt;
just got Bootstrap too, I think it became a way better and more complete option
to style your forms.&lt;/p&gt;

&lt;p&gt;Well, the only piece that was missing for me was being able to use Bootstrap in
the &lt;a href=&quot;http://guides.rubyonrails.org/asset_pipeline.html&quot;&gt;Rails 3.1+ Asset Pipeline&lt;/a&gt;,
so I could write my own CSS classes along with the Bootstrap mixins.&lt;/p&gt;

&lt;p&gt;For this example, let's pretend that we want to use Bootstrap to make all the
tables on our website look good. If you take a look at the
&lt;a href=&quot;http://twitter.github.com/bootstrap/base-css.html#tables&quot;&gt;documentation&lt;/a&gt;, when
you are using the Bootstrap CSS file directly, to make a table look good you
would have to add a couple of classes, depending on what you want to see:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;table table-bordered table-striped&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;There's two problems here, first, look at all those classes!, second, think
of all the tables that will be part of your website. What will happen when you
want to remove the border on all of them? You'd have to edit one by one and
remove the &lt;em&gt;.table-bordered. class&lt;/em&gt; A lot of unnecessary work, if you ask me.&lt;/p&gt;

&lt;p&gt;This is a case where you want to use the asset pipeline to mix Bootstrap with
your own classes.&lt;/p&gt;

&lt;p&gt;First thing you have to do is include the excellent
&lt;a href=&quot;https://github.com/metaskills/less-rails-bootstrap&quot;&gt;less-rails-bootstrap&lt;/a&gt; gem
in your Gemfile.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;less-rails-bootstrap&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Now, edit your &lt;em&gt;app/assets/stylesheets/application.css&lt;/em&gt; file and require bootstrap:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; *= require &amp;#39;twitter/bootstrap&amp;#39;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; *= require_self&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt; *= require_tree .&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This includes all the Bootstrap CSS directly into your own CSS, the same thing
as including it as a separate file on your HTML headers. Look at your website,
it already looks better just by doing this.&lt;/p&gt;

&lt;p&gt;Now, go ahead and create a file called &lt;em&gt;app/assets/stylesheets/tables.css.less&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Before you can use Bootstrap mixins on a &lt;em&gt;less&lt;/em&gt; file, you always have to import
these two mixin files at the very top:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;twitter/bootstrap/variables&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;twitter/bootstrap/mixins&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Don't worry, if you don't use them at all, no code will be added to the resulting
CSS file.&lt;/p&gt;

&lt;p&gt;For our specific example, we want to use the tables mixins, so we import
that file too:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;twitter/bootstrap/variables&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;twitter/bootstrap/mixins&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;twitter/bootstrap/tables&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Now, we can use the table mixins on our own classes or elements. In this case,
I want &lt;em&gt;all&lt;/em&gt; the tables to look exactly the same:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;twitter/bootstrap/variables&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;twitter/bootstrap/mixins&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;twitter/bootstrap/tables&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bordered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;striped&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This makes all the tables on the website look exactly the same, all bordered and
striped.&lt;/p&gt;

&lt;p&gt;Your HTML suffers no more from class-itis:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;table&amp;gt;&lt;/span&gt;
  ...
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/table&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And still, all tables, look bordered and striped!&lt;/p&gt;

&lt;p&gt;If, for example, you just want to get rid of the table border, you'd just remove the
&lt;em&gt;.table-bordered&lt;/em&gt; mixin from this &lt;em&gt;.less&lt;/em&gt; file, not from all the view files.
Cake.&lt;/p&gt;

&lt;p&gt;You might want to take a look at all the &lt;em&gt;bootstrap .less&lt;/em&gt;
&lt;a href=&quot;https://github.com/twitter/bootstrap/tree/master/less&quot;&gt;source files&lt;/a&gt; to get
a better idea of all the mixins that you can use, they all have great inline
documentation.&lt;/p&gt;

&lt;h1&gt;Update&lt;/h1&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://gist.github.com/hishma&quot;&gt;hishma&lt;/a&gt;, for this excellent tip.&lt;/p&gt;

&lt;p&gt;You can achieve the same thing with the &lt;a href=&quot;https://github.com/thomas-mcdonald/bootstrap-sass&quot;&gt;bootstrap-sass gem&lt;/a&gt;
as &lt;a href=&quot;https://gist.github.com/1749504&quot;&gt;explained on this gist&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This way, if you are uncomfortable using less for your css files you can still
use scss.&lt;/p&gt;

&lt;h2&gt;More reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://guides.rubyonrails.org/asset_pipeline.html&quot;&gt;http://guides.rubyonrails.org/asset_pipeline.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.lesscss.org&quot;&gt;http://www.lesscss.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://twitter.github.com/bootstrap/&quot;&gt;http://twitter.github.com/bootstrap/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   <author>
     <name>David Padilla</name>
     <email>david@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Serving Remote Content with Dragonfly</title>
   <link href="http://blog.crowdint.com/2011/12/07/serving-remote-content-with-dragonfly.html"/>
   <updated>2011-12-07T00:00:00-08:00</updated>
   <id>http://blog.crowdint.com/2011/12/07/serving-remote-content-with-dragonfly</id>
   <photo>0db484da0a364dbadf287398f97a97db</photo>
   <content type="html">&lt;p&gt;In the latest project I've been working on here at &lt;strong&gt;Crowd Interactive&lt;/strong&gt;, an
issue came up when serving images on the site. We have our app on &lt;em&gt;Heroku&lt;/em&gt; and
we have a shop on &lt;em&gt;Shopify&lt;/em&gt; as an external service; one of the features we
had to implement was to upload, process and serve images. For this we use the
Dragonfly gem, it stores original versions of the content in a datastore that can
be the filesystem, s3, or any other storage service. The thing is, we needed
to upload the images in the Heroku app but serve them on the Shopify
store.&lt;/p&gt;

&lt;p&gt;When we upload images with &lt;a href=&quot;https://github.com/markevans/dragonfly&quot;&gt;Dragonfly&lt;/a&gt;
in a datastore like Amazon S3 and request the URL of the dragonfly image,
dragonfly serves an URL  relative to the site where we upload the image,
therefore, when we render the image in the browser it receives a permanent
redirect (301) to the original URL of the image at Amazon S3, and if we
want to resize the image, dragonfly applies the transformation on the fly.&lt;/p&gt;

&lt;p&gt;Both situations lead to performance issues, the need to redirect and resolve
the original image URL, and at the same moment use the server time to apply the
resize process to the image. So if we have a web site, where we render a lot of
images, a significant delay will be observed.&lt;/p&gt;

&lt;p&gt;An easy way to solve both problems, is using a couple of methods which
Dragonfly provides to help us remotely serve processed versions of
content such as thumbnails.&lt;/p&gt;

&lt;p&gt;For this case, we just needed to create a &lt;em&gt;Thumb&lt;/em&gt; table to store the jobs with
two strings columns:  &lt;em&gt;job&lt;/em&gt; and &lt;em&gt;uid&lt;/em&gt;, and then just add the configuration block
for the &lt;strong&gt;before_serve&lt;/strong&gt; and &lt;strong&gt;define_url&lt;/strong&gt; methods inside the &lt;em&gt;app.configure do |config| block&lt;/em&gt; in on our &lt;strong&gt;../initializers/dragonfly.rb&lt;/strong&gt; as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;dragonfly&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dragonfly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:app_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:imagemagick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# Is up to us to determine or not an expiration time for the thumbnails&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache_duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3600&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;365&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;production?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://myapp.herokuapp.com&amp;#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;http://localhost:3000&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# First we configure our before_serve method,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Before serving, the first time it is requested stores the thumbnail in the datastore&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;before_serve&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Keep track of its uid&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Holds all the job info, e.g fetch &amp;#39;image_uid&amp;#39; then resize to &amp;#39;40x40&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Thumb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:uid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:job&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Next we define the url for our processed images, overriding the default .url method...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;define_url&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;opts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;thumb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Thumb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# If (the job fetch &amp;#39;image_uid&amp;#39; then resize to &amp;#39;40x40&amp;#39;) has been stored already..&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# then serve the url from the datastore filesystem, s3, etc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thumb&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datastore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thumb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...otherwise if the job hasn&amp;#39;t been stored, serve it from the Dragonfly server as usual&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;job&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This would give us the first time the job is stored:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;image.thumb('40x40').url&lt;/strong&gt;  &lt;em&gt;normal dragonfly url e.g. /media/image...&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Then from the second time onwards:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;image.thumb('40x40').url&lt;/strong&gt;     &lt;em&gt;datastore url  /my-bucket.s3.amazonaws.com/2011…&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This solution allowed us to cache the images, avoid permanent redirects, decrease
dragonfly's jobs load, and overall improvement on our site performance.&lt;/p&gt;

&lt;p&gt;Hope you can find this post useful, see you next time! XD&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS. Thanks to Mario 'Chido' and Mumo for helping me out with some concepts!!&lt;/em&gt;&lt;/p&gt;
</content>
   <author>
     <name>Nora Alvarado</name>
     <email>nora.alvarado@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Concerning Rails 3 Internals</title>
   <link href="http://blog.crowdint.com/2011/11/30/concerning-rails-3-internals.html"/>
   <updated>2011-11-30T00:00:00-08:00</updated>
   <id>http://blog.crowdint.com/2011/11/30/concerning-rails-3-internals</id>
   <photo>89c6420fb99cb01bcf2e3502a7851da2</photo>
   <content type="html">&lt;p&gt;As you may know, when we want to enhance the functionality of a class, we usually
'include' or 'extend' it through modules which include new methods or override
existing ones.&lt;/p&gt;

&lt;p&gt;We use 'include' to add Instance Methods and 'extend' for Class Methods.&lt;/p&gt;

&lt;p&gt;With this in mind, we usually see things like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#lib/posts_lib.rb&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PostsLib&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ClassMethods&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;InstanceMethods&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;included&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;InstanceMethods&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ClassMethods&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PostsLib&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Looking at the code, we notice that we're overwriting the
'self.included()' method, which is a especial callback that is executed when the module
is included on another class ('include PostsLib'  &amp;lt; Right Here).&lt;/p&gt;

&lt;p&gt;Note, we need to use base.send :extend instead because extend is a
private method.&lt;/p&gt;

&lt;p&gt;Just to clarify, this code will let us do things like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;vi&quot;&gt;@post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post_tags&lt;/span&gt;              &lt;span class=&quot;c1&quot;&gt;#instance method&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;find_by_author&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Mumo&amp;#39;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;#class method&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;ActiveSupport::Concern gets rid of the self.included override altogether:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#lib/posts_lib.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;PostsLib&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Concern&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ClassMethods&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;find_by_author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;autho&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;InstanceMethods&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;post_tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;#...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;With this, we obtain clearer code and, for example, sometimes you want to add
different code to self.included() such as logging:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;included&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Something to log here&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Well, that's all, I'm still testing and learning, but i hope this will be useful to you in some way. ^^&lt;/p&gt;

&lt;p&gt;Info source:
  &lt;a href=&quot;http://yehudakatz.com/2009/11/12/better-ruby-idioms/&quot;&gt;Better Ruby Idioms&lt;/a&gt;
  &lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveSupport/Concern.html&quot;&gt;ActiveSupport Concern&lt;/a&gt;
  &lt;a href=&quot;http://www.google.com&quot;&gt;Google&lt;/a&gt;&lt;/p&gt;
</content>
   <author>
     <name>Mumo Carlos</name>
     <email>mumoc@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Making gems with jeweler</title>
   <link href="http://blog.crowdint.com/2011/11/15/making-gems-with-jeweler.html"/>
   <updated>2011-11-15T00:00:00-08:00</updated>
   <id>http://blog.crowdint.com/2011/11/15/making-gems-with-jeweler</id>
   <photo>8a4d383333234bd653b7d768ee999c11</photo>
   <content type="html">&lt;p&gt;A few days ago I was just wondering what the best way to craft a
&lt;a href=&quot;http://en.wikipedia.org/wiki/RubyGems&quot;&gt;Gem&lt;/a&gt; was, and I
figured out it doesn't really matter. Any way you take will lead you to the same place, yet,
I really liked an special way to do it: I found &lt;a href=&quot;https://github.com/technicalpickles/jeweler&quot;&gt;JEWELER&lt;/a&gt;.
In short, Jeweler is a GEM to make GEMS, great, right?&lt;/p&gt;

&lt;p&gt;Its quite simple to use, you just need to follow a few steps to get the skeleton
of a GEM and then you will get it ready to use.&lt;/p&gt;

&lt;p&gt;The greatest stuff about Jeweler is that you have a library to manage and release
&lt;a href=&quot;http://en.wikipedia.org/wiki/RubyGems&quot;&gt;RubyGem&lt;/a&gt; projects. Don't forget to create
your account on the RubyGems website, that will be your signature like a gem crafter.&lt;/p&gt;

&lt;p&gt;You can also use its scaffold generator to start a new RubyGem project.&lt;/p&gt;

&lt;h3&gt;We need to use RubyGems to install JEWELER and get started:&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install jeweler
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;Now with JEWELER installed we are ready to start building our own gem&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jeweler &amp;lt;my-gem-name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;for instance:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jeweler My-Gem
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;You'll get this output:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;  create  .gitignore
  create  Rakefile
  create  Gemfile
  create  LICENSE.txt
  create  README.rdoc
  create  .document
  create  lib
  create  lib/My-Gem.rb   &lt;span class=&quot;c&quot;&gt;#Here you need to put your code&lt;/span&gt;
  create  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;       &lt;span class=&quot;c&quot;&gt;#Here you need to put your Unit Test code&lt;/span&gt;
  create  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/helper.rb
  create  &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;/test_My-Gem.rb
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This means now you have the skeleton for your gem in the My-Gem directory.&lt;/p&gt;

&lt;p&gt;If you want to see the JEWELER command options just run jeweler --help&lt;/p&gt;

&lt;h3&gt;Then we need rake commnad to interact with our gem&lt;/h3&gt;

&lt;p&gt;This step is really important because with this you can generate and validate
the gemspec, realease the gem, run its test suite, display the current version, etc.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake -T

  rake build              &lt;span class=&quot;c&quot;&gt;# Build gem into pkg&lt;/span&gt;
  rake clobber_rcov       &lt;span class=&quot;c&quot;&gt;# Remove rcov products for rcov&lt;/span&gt;
  rake clobber_rdoc       &lt;span class=&quot;c&quot;&gt;# Remove rdoc products&lt;/span&gt;
  rake console&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;script&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# Start IRB with all runtime dependencies loaded&lt;/span&gt;
  rake gemcutter:release  &lt;span class=&quot;c&quot;&gt;# Release gem to Gemcutter&lt;/span&gt;
  rake gemspec            &lt;span class=&quot;c&quot;&gt;# Generate and validate gemspec&lt;/span&gt;
  rake gemspec:debug      &lt;span class=&quot;c&quot;&gt;# Display the gemspec for debugging purposes, as jeweler&lt;/span&gt;
  rake gemspec:generate   &lt;span class=&quot;c&quot;&gt;# Regenerate the gemspec on the filesystem&lt;/span&gt;
  rake gemspec:release    &lt;span class=&quot;c&quot;&gt;# Regenerate, validate gemspec.&lt;/span&gt;
  rake gemspec:validate   &lt;span class=&quot;c&quot;&gt;# Validates the gemspec on the filesystem&lt;/span&gt;
  rake git:release        &lt;span class=&quot;c&quot;&gt;# Tag and push release to git.&lt;/span&gt;
  rake install            &lt;span class=&quot;c&quot;&gt;# Build and install gem using `gem install`&lt;/span&gt;
  rake rcov               &lt;span class=&quot;c&quot;&gt;# Analyze code coverage with tests&lt;/span&gt;
  rake rdoc               &lt;span class=&quot;c&quot;&gt;# Build the rdoc HTML Files&lt;/span&gt;
  rake release            &lt;span class=&quot;c&quot;&gt;# Release gem&lt;/span&gt;
  rake rerdoc             &lt;span class=&quot;c&quot;&gt;# Force a rebuild of the RDOC files&lt;/span&gt;
  rake &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;               &lt;span class=&quot;c&quot;&gt;# Run tests&lt;/span&gt;
  rake version            &lt;span class=&quot;c&quot;&gt;# Displays the current version&lt;/span&gt;
  rake version:bump:major &lt;span class=&quot;c&quot;&gt;# Bump the major version by 1&lt;/span&gt;
  rake version:bump:minor &lt;span class=&quot;c&quot;&gt;# Bump the a minor version by 1&lt;/span&gt;
  rake version:bump:patch &lt;span class=&quot;c&quot;&gt;# Bump the patch version by 1&lt;/span&gt;
  rake version:write      &lt;span class=&quot;c&quot;&gt;# Writes out an explicit version.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;Now we need to set a version before we start using the gem&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake version:write &lt;span class=&quot;nv&quot;&gt;MAJOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;MINOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0 &lt;span class=&quot;nv&quot;&gt;PATCH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;The small explanation for this is: if you do a small change you need to
increase PATCH (0 - 9) then you will start to increase MINOR (0 - 9) stage, and
when you get MAJOR changes, its because you did a whole new version of your gem.&lt;/p&gt;

&lt;p&gt;You will see this message:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;Updated version: 1.0.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;Then, we need to edit our Rakefile and change a couple of lines inside, I suggest to you use VIM/MVIM/GVIM to do that:&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim Rakefile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;If your gem depends upon other libraries, you'll need to define a gem specification, commonly called a &quot;gemspec&quot;.&lt;/p&gt;

&lt;h3&gt;Inside Rakefile look for &quot;gem&quot; and that is the Gem Specification Reference.&lt;/h3&gt;

&lt;p&gt;Here you need to change:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem.summary &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; %Q&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;TODO: summary here about your gem&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem.description &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; %Q&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;TODO: longer description of your gem&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;  to this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem.summary &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; %Q&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Writte a summary here about your gem&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem.description &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; %Q&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;Writte a longer description of your gem&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;After this, we'll install our gem locally and so, we can start testing it:&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;If later you want to release your gem into www.rubygems.org you just need to run the command:&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rake release
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This will automatically:
* Generate My-Gem.gemspec and commit it
* Use git to tag v1.0.0 and push it
* Build My-Gem-1.0.0.gem and push it to rubygems.org&lt;/p&gt;

&lt;h2&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;Now you to know about use jeweler, use it and see how this works, its
not the only way to do a gem, it just works for me, but you can find your own way to do
it however you feel more confortable.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Make your gem and release it&lt;/em&gt; to RubyGems, everybody is waiting for your sexy gems to
make their developer life easier.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Easy way to make yours owns gems (FEB). Faster, Easy and Beautiful&quot;&lt;/p&gt;&lt;/blockquote&gt;
</content>
   <author>
     <name>Victor Velázquez</name>
     <email>victor.velazquez@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Has Cucumber become more ... "Steak"?</title>
   <link href="http://blog.crowdint.com/2011/10/24/cucumber-steak.html"/>
   <updated>2011-10-24T00:00:00-07:00</updated>
   <id>http://blog.crowdint.com/2011/10/24/cucumber-steak</id>
   <photo>2ae35d2e0dfd4ca72c07ead1eec4a8f7</photo>
   <content type="html">&lt;p&gt;Today in Twitter I found a tweet about a big change in &lt;a href=&quot;http://cukes.info&quot;&gt;Cucumber&lt;/a&gt;, the BDD Framework for Rails - well not only for Rails at this point -. Looking at the commit that introduces this change, there was a sentence that summarize very well what the change is about:&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Cucumber scenarios should not be a series of steps that describe what a user clicks. Instead, they should express what a user &lt;em&gt;does&lt;/em&gt;&quot;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;What this means, is that since the first version of Cucumber we have learned that the way to write Cucumber scenarios is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;    &lt;span class=&quot;no&quot;&gt;Feature&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Signin&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;website&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signin&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Scenario&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Signin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Given&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;am&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;When&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Email&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mail@example.org&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;And&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fill&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Password&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;s3cr3t&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;And&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;press&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Login&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;see&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Welcome&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And the scenario steps are:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;    &lt;span class=&quot;no&quot;&gt;Given&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /^(?:|I )am on (.+)$/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;When&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /^(?:|I )fill in &amp;quot;([^&amp;quot;]*)&amp;quot; with &amp;quot;([^&amp;quot;]*)&amp;quot;$/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;fill_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;When&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /^(?:|I )press &amp;quot;([^&amp;quot;]*)&amp;quot;$/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;click_button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /^(?:|I )should see \/([^\/]*)\/$/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Regexp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;respond_to?&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:should&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_xpath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;//*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_xpath?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;//*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We have seen scenarios like this in so many places: blog posts, &lt;a href=&quot;http://railscasts.com/episodes/155-beginning-with-cucumber&quot;&gt;screencasts&lt;/a&gt; and &lt;a href=&quot;http://pragprog.com/book/achbd/the-rspec-book&quot;&gt;books&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But what is wrong with this scenario? well, I would say that nothing is wrong - per se -, it does what it is meant to do; it does add some additional value to our test since it describes in a very simple language - not programmer language - the steps and the expectation of our software behavior. And this is great if we are working together with non-technical people, but if the only people involved in writing and reading those scenarios are technical people, it becomes cumbersome to write and to maintain.&lt;/p&gt;

&lt;p&gt;The steps for our scenario were created when we installed Cucumber in our project, they exists in features/step_definitions/web_steps.rb. In this example we did not have to write anything more than the text that describes our scenario, but web_steps aren't enough for most of the cases in our scenarios so we have to write our own.&lt;/p&gt;

&lt;p&gt;Probably this why when &lt;a href=&quot;https://github.com/cavalle/steak&quot;&gt;Steak&lt;/a&gt; become public it had some attraction and opened the discussion about the Cucumber-way. Steak is a DSL on top of Rspec-Rails that allow us to write features and scenarios - like Cucumber - but without the cumbersome of being too verbose for us the programmers; this reduce the maintenance burden, when for some reason, we have to change the scenarios.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Sigin&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Signin with valid credentials&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/signin&amp;#39;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fill_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Email&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mail@example.org&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;fill_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;s3cr3t&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;click_button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Login&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Welcome&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Later on Steak was merge with &lt;a href=&quot;https://github.com/jnicklas/capybara&quot;&gt;Capybara&lt;/a&gt; but kept the same philosophy. Personally I did favor Steak over Cucumber and I have used for several &lt;a href=&quot;http://blog.crowdint.com/2011/07/06/acceptance-testing-with-steak.html&quot;&gt;projects&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A few weeks ago when someone here at Crowd had to review a project that was tested with Steak, told me that he had a hard time trying to figure out what some of the
scenarios were doing just by looking at the specs, he told me that if the scenarios were written in Cucumber it could have been more easy for him to understand what was going on.&lt;/p&gt;

&lt;p&gt;Somehow this person had a point, it definitely takes more time to learn what a scenario is doing in Steak than in Cucumber. This leads us back to the beginning of this post; are we misusing Cucumber? why we can't have the best of both worlds &quot;Cucumber-Steak&quot;, well starting from version 1.1.0 we could have this; actually we don't have to wait for that version, we can do it today, but after this commit Cucumber itself will force us to change the way that we work with it.&lt;/p&gt;

&lt;p&gt;First this new version will not provide the features/step_definitions/web_steps.rb file, so we are alone, we would not be able to use steps like &quot;When I fill in 'Email' with 'mail@example.org'&quot; out of the box. And we have to write our scenarios to express what the user does:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;    &lt;span class=&quot;no&quot;&gt;Feature&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Signin&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;website&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;As&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;want&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signin&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Scenario&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Signin&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credentials&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Given&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;mail@example.org&amp;#39;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;I&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;see&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Welcome&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Our scenario steps become:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;    &lt;span class=&quot;no&quot;&gt;Given&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /^I have signed up as &amp;quot;([^&amp;quot;]*)&amp;quot;$/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signup_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fill_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Email&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fill_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Email&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fill_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;s3cr3t&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fill_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Password Confirmation&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;s3cr3t&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;click_button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Sign up&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;no&quot;&gt;Then&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /^I should see &amp;quot;([^&amp;quot;]*)&amp;quot;$/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;In my opinion this simple change brings the best of both worlds, our scenario is more clean, easy to read and easy to maintain, the most important is that this is not a change in the Cucumber code, but a change in the mind set on how to use Cucumber.&lt;/p&gt;

&lt;p&gt;If you want to take a look by your self at the commit that implemented this change here is the &lt;a href=&quot;https://github.com/cucumber/cucumber-rails/commit/f027440965b96b780e84e50dd47203a2838e8d7d&quot;&gt;link&lt;/a&gt;&lt;/p&gt;
</content>
   <author>
     <name>Mario Chavez</name>
     <email>mac@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Using rbenv to manage your rubies</title>
   <link href="http://blog.crowdint.com/2011/10/05/using-rbenv-for-managing-your-rubies.html"/>
   <updated>2011-10-05T00:00:00-07:00</updated>
   <id>http://blog.crowdint.com/2011/10/05/using-rbenv-for-managing-your-rubies</id>
   <photo>6be5df410f2695b1341f0c359bc9b461</photo>
   <content type="html">&lt;p&gt;While working with ruby, you have some alternatives to manage your binaries,
but as you think of them, I hope you are not really considering delegating this
task directly to your OS package manager since it is discouraged, otherwise you
would end up with a messy workstation.&lt;/p&gt;

&lt;p&gt;There are a few tools that allow you to manage your rubies and gems, the most
popular among them is, without doubts, &lt;a href=&quot;http://beginrescueend.com/&quot;&gt;RVM&lt;/a&gt;
(Ruby Version Manager) which in all fairness is good, it provides a CLI to
switch between your rubies and gemsets. If you haven't used RVM, you should
read &lt;a href=&quot;http://blog.crowdint.com/2010/07/28/getting-started-with-rvm.html&quot;&gt;this guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Even when RVM is great, there are a couple of things that I don't like about it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Personally, I had a painful situation as a Linux user, every time I wanted to
get a fresh ruby version with support for readline and zlib libraries and its
dependencies.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Its gemset management feature tends to duplicate gems across your projects. I
get it, sometimes you need to isolate your gems to keep them compatible. But
there is another player in the field, called bundler. (mentioned down below)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Plus that last bullet, some colleages have mentioned having a 5~6 GB .rvm
folder.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;A couple of days ago, I was struggling to track down a gem that I wasn't sure
where exactly came from, anyway I was about to create a new gemset to do a fresh
start when someone adviced me to check out rbenv.&lt;/p&gt;

&lt;h2&gt;The rbenv way&lt;/h2&gt;

&lt;p&gt;A highlight in favor of rbenv is that you don't actually need to worry about
maintaing your gemsets, since it relays on &lt;a href=&quot;http://gembundler.com/&quot;&gt;bundler&lt;/a&gt;
who takes care of all your application dependencies. Letting you care about
just the version of the ruby you want to use globally, locally and in a per
project basis. Let's check out &lt;a href=&quot;http://gituhub.com/ssthepenson/rbenv&quot;&gt;rbenv&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;RVM and rbenv aren't friends :(&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;First of all, you better avoid using both in the same environment because they
are incompatible. Don't say I didn't warn you.&lt;/p&gt;

&lt;h2&gt;Installation&lt;/h2&gt;

&lt;h3&gt;1. Get rid of RVM by running:&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rvm implode
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;2. To install rbenv, must be at ~ and clone it:&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git://github.com/sstephenson/rbenv.git ~/.rbenv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;3. Add scope for rbenv binaries to your $PATH&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;export PATH=&amp;quot;$HOME/.rbenv/bin:$PATH&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; .bash_profile
&lt;span class=&quot;c&quot;&gt;# be sure of do this to your bash source file (e.g. .bashrc, .profile)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;4. Setup bash autocompletion:&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;eval &amp;quot;$(rbenv init -)&amp;quot;&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; .bash_profile
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;5. Restart your shell.&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;There are two ways of installing rubies with rbenv. From source and &lt;em&gt;make it&lt;/em&gt;
into &quot;~/.rbenv/versions/&amp;lt;x.x.x-pxxx&gt;&quot; or the one I prefer using &lt;em&gt;ruby-build&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;6. Install ruby-build&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone git://github.com/sstephenson/ruby-build.git ~/.ruby-build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/.ruby-build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./install.sh
&lt;span class=&quot;c&quot;&gt;# you may need to run with sudo, since it installs a binary in /usr/local/bin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;7. Install a ruby&lt;/h3&gt;

&lt;p&gt;Now, we are ready to install a ruby version.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; After a couple times trying to get a ruby with readline support
for my &lt;em&gt;irb&lt;/em&gt;, I googled and found a way.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;For Ubuntu&lt;/em&gt; I used my readline path:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ CONFIGURE_OPTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;--with-readline-dir=/usr/include/readline&amp;quot;&lt;/span&gt; rbenv
install 1.9.3-preview1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And there we go, we give it some time, get some coffee or play a ping pong
match. Once rbenv finishes, and every time after installing a ruby
you need to run:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv rehash
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;I have to mention, that it seems tricky, but you can set an alias in
your &lt;code&gt;~/.bash_profile&lt;/code&gt; or export an environment variable.&lt;/p&gt;

&lt;h2&gt;Usage&lt;/h2&gt;

&lt;p&gt;Let's suposse you've got some more rubies, now, how do we specify the
version of ruby we want to use:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To setup a global ruby you do something like:&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv global 1.9.3-preview1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;To setup a local (per-project) ruby you do:&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;1.9.2-p290
&lt;span class=&quot;c&quot;&gt;# this creates a rbenv-version file in the current folder&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;What version of ruby am I using?&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv version
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;What versions of ruby do I have?&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rbenv versions
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;There are a couple of things that remain unexplored, but for now this is a great
start. In case you miss the gemset, &lt;a href=&quot;http://github.com/jamis/rbenv-gemset&quot;&gt;this&lt;/a&gt;
is something you might want to look at.&lt;/p&gt;

&lt;p&gt;So, give it a try, you might like it. For now I'm happy with my fresh
rbenv install. Let us know your rbenv experience.&lt;/p&gt;
</content>
   <author>
     <name>Ignacio Galindo</name>
     <email>ignacio.galindo@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Better SEO with Rich Snippets for eCommerce</title>
   <link href="http://blog.crowdint.com/2011/09/27/better-seo-with-rich-snippets-for-e-commerce.html"/>
   <updated>2011-09-27T00:00:00-07:00</updated>
   <id>http://blog.crowdint.com/2011/09/27/better-seo-with-rich-snippets-for-e-commerce</id>
   <photo>3902dd38c6f69b1865c5b20e168e827a</photo>
   <content type="html">&lt;p&gt;While Rich Snippets started indexing by Google two years ago it’s still rarely
used on small and medium size websites. Big players on market such as Amazon,
Hotels.com, eBay are using it successfully and getting more benefits in SEO.
So, why don’t utilize it?&lt;/p&gt;

&lt;h2&gt;What are Rich Snippets?&lt;/h2&gt;

&lt;p&gt;Rich Snippets allows search engines to collect more Meta information about
pages and its contents. The more information Google can collect about your
website the more relevant results users get, and thus you have better targeting on web.&lt;/p&gt;

&lt;h2&gt;What you can do with Rich Snippets?&lt;/h2&gt;

&lt;p&gt;Today Rich Snippets allow describing entities of several types:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Organizations&lt;/li&gt;
&lt;li&gt;People&lt;/li&gt;
&lt;li&gt;Products and offers&lt;/li&gt;
&lt;li&gt;Reviews&lt;/li&gt;
&lt;li&gt;Events&lt;/li&gt;
&lt;li&gt;Breadcrumbs&lt;/li&gt;
&lt;li&gt;Videos&lt;/li&gt;
&lt;li&gt;and Recipes&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;In eCommerce we’re mostly interested in describing organizations, products,
reviews and breadcrumbs. Other types we use in particular cases.&lt;/p&gt;

&lt;h2&gt;Describe online store&lt;/h2&gt;

&lt;p&gt;In practice it makes sense to implement it on About or Contact page.
With Rich Snippets for Organizations you can specify following Meta info:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Name of your business&lt;/li&gt;
&lt;li&gt;Link to organization home page&lt;/li&gt;
&lt;li&gt;Location of the business&lt;/li&gt;
&lt;li&gt;Telephone numbers&lt;/li&gt;
&lt;li&gt;Geographical coordinates of its location&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;With this structured information Google understands your website more accurately.
Additionally you might get benefits in local search as Google adds your business
to Google Places service.&lt;/p&gt;

&lt;h2&gt;Describe your products&lt;/h2&gt;

&lt;p&gt;Benefits of implementing Rich Snippets to describe products are evident. Take a
look at picture below:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/2011/09/27/search_results.png&quot; alt=&quot;Search Results&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The website on top &lt;a href=&quot;www.pandoramoa.com&quot;&gt;www.pandoramoa.com&lt;/a&gt; describes products
in proper format. Because of that Google knows and provides not only relevant page
to users search query, but also shows relevant image and list of similar products
with links to them. Such huge snippet in SERPs grabs more attention and makes
it more likely to click on it.
It supports following Meta info:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The name of the product&lt;/li&gt;
&lt;li&gt;Product image&lt;/li&gt;
&lt;li&gt;Product description&lt;/li&gt;
&lt;li&gt;Brand of the product&lt;/li&gt;
&lt;li&gt;Product review&lt;/li&gt;
&lt;li&gt;Product ID (sku, asin, upc, isbn or mpn)&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Format customer reviews&lt;/h2&gt;

&lt;p&gt;Customer reviews is a common tool in eCommerce which is used almost on every
online store. Once you give it a proper shape according Rich Snippets requirements
you get additional weight on search results. See how stars grab attention..&lt;/p&gt;

&lt;p&gt;To enable Rich Snippet reviews on your page you need to specify following attributes:
* Item being reviewed
* Numerical quality rating for the item
* The author of the review
* The date that the item was reviewed
* Review body
* Short summary of the review&lt;/p&gt;

&lt;h2&gt;Beautify breadcrumbs&lt;/h2&gt;

&lt;p&gt;Instead of displaying long URL in SERPs (which often looks ugly and gives no
real value to user) Google can show breadcrumbs if you create right markup for it.&lt;/p&gt;

&lt;p&gt;Notice that each item in breadcrumbs is a link to specific page on your website.
So, in practice you replace long, non-valuable and not clickable URL with
structured chain of clickable links to your website.&lt;/p&gt;

&lt;p&gt;To format breadcrumbs in this way you just need to specify following
attributes for each item:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The title of a breadcrumb&lt;/li&gt;
&lt;li&gt;The URL of a breadcrumb&lt;/li&gt;
&lt;li&gt;The next breadcrumb in the hierarchy&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;How to markup Rich Snippets?&lt;/h2&gt;

&lt;p&gt;Google supports three formats:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Microdata_(HTML5)&quot;&gt;Microdata (HTML5 specification)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://microformats.org/&quot;&gt;Microformats (simple conventions)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/RDFa&quot;&gt;RDFa (a way to label content)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;One step back&lt;/h2&gt;

&lt;p&gt;While you have all these opportunities to increase evidence and weight in SERPs
remember that Google doesn’t guarantee that it will be 100% used. In most cases
it’s using, however consider it as an opportunity of SEO improvement.&lt;/p&gt;

&lt;h2&gt;Links to check&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.google.com/support/webmasters/bin/topic.py?hl=en&amp;amp;topic=21997&quot;&gt;Rich Snippets documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.google.com/webmasters/tools/richsnippets&quot;&gt;Rich Snippets testing tool&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Your turn&lt;/h2&gt;

&lt;p&gt;Tell u which types of Rich Snippets makes the most value for you?&lt;/p&gt;
</content>
   <author>
     <name>Pavel Reva</name>
     <email>pavel.reva@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Ruby benchmarks</title>
   <link href="http://blog.crowdint.com/2011/09/05/ruby-benchmarks.html"/>
   <updated>2011-09-05T00:00:00-07:00</updated>
   <id>http://blog.crowdint.com/2011/09/05/ruby-benchmarks</id>
   <photo>d32b52ec6403614b1adf3e648cbbe584</photo>
   <content type="html">&lt;p&gt;I recently started a new client project. Lucky me, &lt;a href=&quot;http://weblog.rubyonrails.org/2011/8/31/rails-3-1-0-has-been-released&quot;&gt;Rails 3.1 has just
been released&lt;/a&gt;
so, it means I'll get to learn a bunch of things while
building it, you know, the fancy &lt;a href=&quot;http://guides.rubyonrails.org/asset_pipeline.html&quot;&gt;asset pipeline&lt;/a&gt;
stuff everyone's talking about and so on.&lt;/p&gt;

&lt;p&gt;I wrote a couple of rspec specs and cucumber features, made them pass, and
while I was about to start new features, decided to stop to check the
current state of all the different rubies to try them and pick the
faster one, at least for development.&lt;/p&gt;

&lt;p&gt;Well, I was already using &lt;em&gt;MRI 1.9.2&lt;/em&gt;, so, for research purposes
I proceeded to install &lt;em&gt;MRI 1.9.3-preview&lt;/em&gt;, &lt;em&gt;Rubinus 1.2.5dev&lt;/em&gt;, &lt;em&gt;REE-1.8.7&lt;/em&gt; and
&lt;em&gt;jRuby 1.6.3&lt;/em&gt;. (Thank you &lt;a href=&quot;http://beginrescueend.com/&quot;&gt;RVM&lt;/a&gt; for making this as
easy as possible).&lt;/p&gt;

&lt;p&gt;Now, so far, my app has 4 rspec specs and 3 cucumber scenarios, but
even so, I came up with interesting time results.&lt;/p&gt;

&lt;p&gt;Below the results of running &lt;em&gt;time rake&lt;/em&gt; for each
implementation.&lt;/p&gt;

&lt;h2&gt;MRI 1.9.2&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Rspec&lt;/span&gt;
Finished in 0.13588 seconds
4 examples, 0 failures

&lt;span class=&quot;c&quot;&gt;# Cucumber&lt;/span&gt;
3 scenarios &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3 passed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
10 steps &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10 passed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0m0.756s

&lt;span class=&quot;c&quot;&gt;# Time&lt;/span&gt;
real    0m24.259s
user    0m20.752s
sys 0m2.530s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;MRI 1.9.3-preview&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Rspec&lt;/span&gt;
Finished in 0.05074 seconds
4 examples, 0 failures

&lt;span class=&quot;c&quot;&gt;# Cucumber&lt;/span&gt;
3 scenarios &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3 passed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
10 steps &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10 passed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0m0.379s

&lt;span class=&quot;c&quot;&gt;# Time&lt;/span&gt;
real    0m13.354s
user    0m10.120s
sys 0m1.546s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;jRuby&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# RSpec&lt;/span&gt;
Finished in 0.186 seconds
4 examples, 0 failures

&lt;span class=&quot;c&quot;&gt;# Cucumber&lt;/span&gt;
3 scenarios &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3 passed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
10 steps &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10 passed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0m2.141s

&lt;span class=&quot;c&quot;&gt;# Time&lt;/span&gt;
real    1m3.823s
user    2m9.875s
sys 0m7.005s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;Rubinus&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# RSpec&lt;/span&gt;
Finished in 0.27061 seconds
4 examples, 0 failures

&lt;span class=&quot;c&quot;&gt;# Cucumber&lt;/span&gt;
3 scenarios &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3 passed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
10 steps &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10 passed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0m2.011s

&lt;span class=&quot;c&quot;&gt;# Time&lt;/span&gt;
real    0m47.328s
user    1m1.049s
sys 0m2.938s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;REE&lt;/h2&gt;

&lt;p&gt;Note that I used the following environment variables for this one:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;RUBY_GC_MALLOC_LIMIT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;50000000&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;RUBY_HEAP_MIN_SLOTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;500000&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;RUBY_HEAP_SLOTS_GROWTH_FACTOR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;RUBY_HEAP_SLOTS_INCREMENT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;250000&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;To understand how this affects its performance, check out &lt;a href=&quot;http://blog.crowdint.com/2010/12/07/improving-your-dev-life-with-ree.html&quot;&gt;this post&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# RSpec&lt;/span&gt;
Finished in 0.05163 seconds
4 examples, 0 failures

&lt;span class=&quot;c&quot;&gt;# Cucumber&lt;/span&gt;
3 scenarios &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;3 passed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
10 steps &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;10 passed&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
0m0.277s

&lt;span class=&quot;c&quot;&gt;# Time&lt;/span&gt;
real    0m10.769s
user    0m7.519s
sys 0m2.106s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It looks like there's huge speed improvements from 1.9.2 to 1.9.3. It took
24 seconds on 1.9.2 and 12 on 1.9.3, that's a lot of speed boost!&lt;/p&gt;

&lt;p&gt;JRuby, at 1 minute where the other rubies took seconds is light years
behind them, though, I might be doing something wrong. I really have no practical
experience with it and I just benchmarked it out of the box.&lt;/p&gt;

&lt;p&gt;Rubinus felt kind of slow too, but, I consider it to be
work in progress, or at least haven't heard of production apps running
on it yet, which doesn't necesarily mean there aren't any. I'd actually
love to use it on production for a few weeks when we launch this app
just to see how it behaves in real life.&lt;/p&gt;

&lt;p&gt;And last but not least, a properly configured REE kicks butt. No surprise there, we've been using it
on another app on production for a year now with good performance and no
problems at all so far.&lt;/p&gt;

&lt;p&gt;So, there it is. I realize it is a small benchmark, but perhaps I can
revisit it when we have more specs and more features to see if that
changes how the rubies behave.&lt;/p&gt;

&lt;p&gt;Cheers!&lt;/p&gt;
</content>
   <author>
     <name>David Padilla</name>
     <email>david@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Auto Retry Failed Cucumber Tests</title>
   <link href="http://blog.crowdint.com/2011/08/22/auto-retry-failed-cucumber-tests.html"/>
   <updated>2011-08-22T00:00:00-07:00</updated>
   <id>http://blog.crowdint.com/2011/08/22/auto-retry-failed-cucumber-tests</id>
   <photo>f7412b373affd1d6db10752cf5d69315</photo>
   <content type="html">&lt;p&gt;If you're tired of having to re-kick builds in your CI server because of non deterministic failures,
this post is for you.
After I implemented this awesome feature our builds started to be more realistic,
and developers actually care now if their branch is red.&lt;/p&gt;

&lt;p&gt;I'm going to show you how I got to the point where failed cucumber features auto retry themselves.
I started to dig into the cucumber documentation and I couldn't find how to implement an auto retry feature straightforward.
After being a curious developer and reading some of the cucumber code I found that there was a formatter named 'rerun', this is so nice!
I went back to the cucumber documentation and I found that it was almost what I was looking for
and that I could use it straight in my cucumber profiles:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#config/cucumber.yml&lt;/span&gt;
selenium: --format pretty --format rerun --out tmp/rerun.txt features/selenium --require features/selenium/step_definitions --require features/selenium/support
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;It can receive an extra parameter --out, this is used to store failed tests along with the line number, awesome!!, isn't it?&lt;/p&gt;

&lt;p&gt;Ok, now I had the ability to track failed tests and store them in a txt file, now what's next? I started to think how my rake task
would look like, parsing the file and those ugly things, but I was sure that this problem had been already solved, it was as simple
as run 'cucumber --help' in command line to find out, and guess what?&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cucumber --help
Usage: cucumber &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;options&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;FILE|DIR|URL&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;:LINE&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;:LINE&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;*&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;+

Examples:
cucumber examples/i18n/en/features
cucumber @rerun.txt &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;See --format rerun&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
cucumber examples/i18n/it/features/somma.feature:6:98:113
cucumber -s -i http://rubyurl.com/eeCl
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Whooohooo, it accepts the file generated by the rerun formatter!!! so now I tried this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;cucumber @tmp/rerun.txt --format pretty features/selenium --require features/selenium/step_definitions --require features/selenium/support
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And, it worked!... it took failed tests and ran them! Cool, now I had to integrate this with our cucumber rake tasks.&lt;/p&gt;

&lt;p&gt;I thought it'd be easy, so I started with a rerun rake task:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cucumber&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;no&quot;&gt;Cucumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rerun&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Rerun failed cucumber tests&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exist?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;tmp/rerun.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;tmp/rerun.txt&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;w+&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;profile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rerun&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Doh! I ran it and failed because I didn't specify the 'rerun' profile in cucumber.yml, easy to fix:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#config/cucumber.yml&lt;/span&gt;
selenium: --format pretty --format rerun --out tmp/rerun.txt features/selenium --require features/selenium/step_definitions --require features/selenium/support
rerun: @tmp/rerun.txt --format pretty features/selenium --require features/selenium/step_definitions --require features/selenium/support
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Done, I got my 'rake cucumber:rerun' task and it worked just fine. My next step was to include this in 'rake cucumber:all' and, theoretically
if the selenium profile failed, it'd execute rerun task and retry failed tests,  but! it exited after the selenium profile
failed and the task finished right away. Then I thought, of course! it works how it's supposed to work,
it exits when it fails, so it was not that easy.&lt;/p&gt;

&lt;p&gt;This was the tricky part, because I had to wrap this task up in a huge begin rescue block, I ended up implementing my own
super sophisticated task runner:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run_rake_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Rake&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;invoke&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Cool, it wraps up my tasks and catches the error, I had everything I needed, so I created another rake task:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:cucumber&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Run selenium and rerun failed tests&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:selenium_with_retry&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;selenium_successful&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_rake_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cucumber:selenium&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rerun_successful&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selenium_successful&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;rerun_successful&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;run_rake_task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cucumber:rerun&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selenium_successful&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rerun_successful&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CucumberFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Cucumber tests failed&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Done! I just replaced this new task in our main rake cruise task, and bingo! It now auto retries failed cucumber tests.&lt;/p&gt;

&lt;p&gt;I know it has a lot of opportunity areas, but hopefully this helps to somebody else to get their builds green!&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</content>
   <author>
     <name>Edwin Cruz</name>
     <email>edwin.cruz@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>How to install Postgresql 8.4 in a Vagrant box</title>
   <link href="http://blog.crowdint.com/2011/08/11/postgresql-in-vagrant.html"/>
   <updated>2011-08-11T00:00:00-07:00</updated>
   <id>http://blog.crowdint.com/2011/08/11/postgresql-in-vagrant</id>
   <photo>29612de9aa10447dc2f9ec84cf2ab1b2</photo>
   <content type="html">&lt;p&gt;If you don't know what Vagrant is, go read our &lt;a href=&quot;http://blog.crowdint.com/2011/06/21/vagrant.html&quot;&gt;first post about it&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Ok, we've been using &lt;code&gt;Vagrant&lt;/code&gt; to manage our servers and services for a while, and we love it.
It's clean, easy and we don't mess with our original systems.
Last week we started a new proyect that uses &lt;code&gt;postgresql&lt;/code&gt;, so we tried doing the common &lt;code&gt;apt-get install postgresql&lt;/code&gt;
but nothing seemed to work, there is a &lt;a href=&quot;http://vagrantup.com/docs/provisioners/introduction.html&quot;&gt;chef&lt;/a&gt; recipe,
but it looks like it has some issues and we didn't have enough time to do the research.
In one word: Frustration.&lt;/p&gt;

&lt;p&gt;So, what did we do?, we installed it with our bare hands, step by step.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Let's start!&lt;/h2&gt;

&lt;p&gt;Start your vagrant box.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;you&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vagrant up
you&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vagrant ssh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;1) Fixing the 'Please check that your locale settings' error&lt;/h2&gt;

&lt;p&gt;Seems like the current box from vagrant have issues with postgres &amp;amp; lang settings. Easy to fix..&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;vagrant&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo vim /etc/bash.bashrc

&lt;span class=&quot;c&quot;&gt;# Add this lines to the bottom:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LANGUAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;en_US.UTF-8
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LANG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;en_US.UTF-8
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LC_ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;en_US.UTF-8
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Save &amp;amp; Exit. Then run these commands:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;vagrant&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo locale-gen en_US.UTF-8
vagrant&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo dpkg-reconfigure locales
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Ok, now your system has configured the default LANG. No more 'LANG=C' error.&lt;/p&gt;

&lt;h2&gt;2) Install postgres 8.4, and the comunity extras&lt;/h2&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;vagrant&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get install postgresql postgresql-contrib; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Add postgres's binaries to the PATH.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;vagrant&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo nano /etc/bash.bashrc

&lt;span class=&quot;c&quot;&gt;# Add this lines to the file:&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/usr/lib/postgresql/8.4/bin/
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PGDATA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/pgsql/data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Save &amp;amp; Exit. Ok, now you can run &lt;code&gt;postgres --version&lt;/code&gt; and other postgresql executables.
Also, you've defined the default data folder, you will need that soon (1).&lt;/p&gt;

&lt;h3&gt;Setup postgres's user, and data folder.&lt;/h3&gt;

&lt;p&gt;Postgresql server should be started by his own system user,
and it have been created by the installation but using a random password.
Now you'll change that password.&lt;/p&gt;

&lt;p&gt;Change postgres's password.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;vagrant&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo su
root# passwd postgres
&lt;span class=&quot;c&quot;&gt;# Type a new password, like &amp;#39;postgres&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Init postgres data structure, and create the storage folder&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;root# mkdir /usr/local/pgsql/data
root# chown postgres /usr/local/pgsql/data
root# su postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Init the data folder&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;postgres&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;initdb -D /usr/local/pgsql/data
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Note (1): Make sure this is the same directory as your &lt;code&gt;PGDATA&lt;/code&gt; variable.&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;3) Enable remote connections&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;postgres&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;vim /usr/local/pgsql/data/postgres.conf

&lt;span class=&quot;c&quot;&gt;# Change this `listen_address=&amp;#39;localhost&amp;#39;` to&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;listen_address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Save &amp;amp; exit.&lt;/p&gt;

&lt;h3&gt;Enable access from local network&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;postgres&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nano /usr/local/pgsql/data/pg_hba.conf

&lt;span class=&quot;c&quot;&gt;# Vagrant uses 33.33.33.10 like addresses&lt;/span&gt;
host all all 33.33.33.0/24 trust
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Save &amp;amp; exit.&lt;/p&gt;

&lt;h3&gt;Start server&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;vagrant&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;su postgres
postgres&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;Done.&lt;/h2&gt;

&lt;p&gt;Congrats!&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;Extras&lt;/h2&gt;

&lt;h3&gt;Notes:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;You can stop the server pressing &lt;code&gt;ctrl + C&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;You can start the server in background using &lt;code&gt;postgres$ postgres &amp;amp;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You must start postgresql using postgres user.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;You could improve this post saying how to start postgresql as a service, would you?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;GUI admin?&lt;/h3&gt;

&lt;p&gt;Now you can install tools like &lt;code&gt;pgAdmin3&lt;/code&gt; to manage your postgresql server and databases directly from your host.
It's multiplatform and free.&lt;/p&gt;

&lt;h3&gt;References:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.postgresql.org/docs/8.4/static/creating-cluster.html&quot;&gt;Official postgres documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bookmarks.honewatson.com/2009/05/30/perl-warning-please-check-that-your-locale-settings-ubuntu/&quot;&gt;About the locale error&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.pgadmin.org/&quot;&gt;Download pgAdmin 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;del&gt;Mom&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;h2&gt;Disclamer &amp;amp; feedback&lt;/h2&gt;

&lt;p&gt;Please note that all of these steps have been &lt;code&gt;discovered&lt;/code&gt; by us entirely with some help of google's special powers...
feel free to add comments if you know of a better way to do something, or if there is a mistake
that need to be remarked. Also, if you are using Ubuntu, you probably won't need all of these steps,
as Ubuntu provides the server with all the structure, and preconfigured files.&lt;/p&gt;

&lt;p&gt;Also, we should write another post describing how to use a Chef recipe for this
avoiding all this s**t... And it shall be called, &lt;code&gt;The Easy Way&lt;/code&gt;, coming soon.&lt;/p&gt;

&lt;h2&gt;Stay tuned!&lt;/h2&gt;

&lt;h3&gt;-Mario&lt;/h3&gt;
</content>
   <author>
     <name>Mario Zaizar</name>
     <email>mario@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Acceptance testing with Steak</title>
   <link href="http://blog.crowdint.com/2011/07/06/acceptance-testing-with-steak.html"/>
   <updated>2011-07-06T00:00:00-07:00</updated>
   <id>http://blog.crowdint.com/2011/07/06/acceptance-testing-with-steak</id>
   <photo>2f2bc78de007915554f49c3ea0fef125</photo>
   <content type="html">&lt;p&gt;Acceptance testing is a technique that helps determine if the requirements of
our application are met. There are several frameworks to help us with this.
One of the most popular is Cucumber, in which you practically describe in plain English
your stories, but you also have to code a lot of steps in order for your tests to work.&lt;/p&gt;

&lt;p&gt;To avoid this, and just test your features in Ruby, we have Steak,
which works very well with Rspec.
To use it you only need to put this on your Gemfile:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:development&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;steak&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Then run the bundle install command and after that install steak&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rails g steak:install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Steak will create the acceptance folder inside your specs directory. This is where
all your acceptance tests will be placed.
Now, to create your test, you need to run the command&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;rails g steak:spec my_first_steak_test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This will create a file with the basic structure of your test, and now you are
ready to start coding!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;acceptance/acceptance_helper&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Steak feature&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%q{&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  In order to ...&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  As a ...&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  I want ...&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;first scenario&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;As you can see it starts pretty much as a Cucumber feature, where you can describe
what your feature is about and what should every scenario do.&lt;/p&gt;

&lt;p&gt;Here's a small feature to test a form in an application.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expand_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dirname&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__FILE__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/acceptance_helper&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;feature&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Add Products to Store&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%q{&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  In order to add products in my store&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  As an admin&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;  I want to create a product&lt;/span&gt;
&lt;span class=&quot;sx&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;background&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;login_user!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;admin@example.com&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;scenario&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Add products to store&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_product_path&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fill_the_following&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;Name&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;New Product&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;Description&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Fantastic product&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&amp;#39;Price&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;32.00&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;n&quot;&gt;click_link_or_button&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Create Product&amp;#39;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Your product has been created&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;As you can see the syntax is pretty easy and looks a lot like Rspec. The cool thing
is that Steak creates a support folder inside the acceptance directory, where you
have your helpers.rb file and the paths.rb file.&lt;/p&gt;

&lt;p&gt;In the helpers.rb file you can put all the methods you need to run your test,
methods that you might end up using a lot among all your specs, like the one in the
example login_user!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;login_user!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;homepage&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;click_link_or_button&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Log In&amp;#39;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;fill_the_following&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Email&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;Password&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;click_link_or_button&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Log In&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;For paths, you can put directly the route like in the example, or you can define your
own named routes in the paths.rb file, like&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_product&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;/products/new&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;Hope this little guide will help you as an introduction to the Steak world!
Which in my opinion is not difficult nor totally different from Cucumber, I think
its even easier, because it comes with a lot of helpers and methods to check the
styles and contents in your page.&lt;/p&gt;

&lt;p&gt;The other thing I like about Steak, as I mentioned at the beginning of this post, is
that you get rid of tons of steps definitions, you just write down methods for
the repeated steps you take in all of your tests.&lt;/p&gt;

&lt;p&gt;Thanks for reading and happy testing!&lt;/p&gt;
</content>
   <author>
     <name>Ana Rosas</name>
     <email>ana@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Rails 3.1, Compass and Blueprint (Updated)</title>
   <link href="http://blog.crowdint.com/2011/06/27/rails-3-1-compass-and-blueprint.html"/>
   <updated>2011-06-27T00:00:00-07:00</updated>
   <id>http://blog.crowdint.com/2011/06/27/rails-3-1-compass-and-blueprint</id>
   <photo>d32b52ec6403614b1adf3e648cbbe584</photo>
   <content type="html">&lt;p&gt;So, we all know that Rails 3.1 comes with a Sass compiler. But still,
there are a few of us that used &lt;a href=&quot;http://compass-style.org/&quot;&gt;compass&lt;/a&gt; on
most of our pre 3.1 projects not just
because of the sass, but because of the &lt;a href=&quot;http://www.blueprintcss.org/&quot;&gt;blueprint&lt;/a&gt;
integration.&lt;/p&gt;

&lt;p&gt;Well, it's very easy to use Compass with Rails 3.1 and get all those
Blueprint mixins for your stylesheets.&lt;/p&gt;

&lt;p&gt;All you have to do is, add the compass gem to your Gemfile:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:assets&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;compass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;~&amp;gt; 0.12.alpha&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;NOTE:&lt;/em&gt; If you want the scss files compiled on the fly, you have to put
the compass gem line &lt;em&gt;outside of the assets group&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The trick here is that you have to use the latest alpha version of compass &lt;span class=&quot;updated&quot;&gt;compass edge version from git, and
the &lt;em&gt;rails31&lt;/em&gt; branch currently under development&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span class=&quot;updated&quot;&gt;This might change in future compass releases, but for now, this is the
only way.&lt;/span&gt;&lt;/p&gt;

&lt;h2&gt;Blueprint styles&lt;/h2&gt;

&lt;p&gt;If you just want to use the blueprint classes on your application, create a
&lt;em&gt;blueprint.css.scss&lt;/em&gt; file on &lt;em&gt;app/assets/stylesheets&lt;/em&gt; with
the following contents:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;  &lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;_blueprint&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;blueprint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This file will just be used to load the blueprint css framework onto our
stylesheet files.&lt;/p&gt;

&lt;p&gt;Now, on &lt;em&gt;app/assets/stylesheets/application.css&lt;/em&gt; make sure you require
the file that you just created by adding it right after &lt;em&gt;require_self&lt;/em&gt;
in the manifest:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;  &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;require_self&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;blueprint&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;require_tree&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And, that's it. Now you'll be able to use all the usual blueprint styles
on your Rails 3.1 application.&lt;/p&gt;

&lt;h2&gt;Mixins&lt;/h2&gt;

&lt;p&gt;If you want to use the blueprint mixins, you must do something a bit
different than the regular asset pipeline stuff.&lt;/p&gt;

&lt;p&gt;Let's say you will have a bookstore.css file with all your styles. If
this is the case, create a file named
&lt;em&gt;app/assets/stylesheets/bookstore.css.scss&lt;/em&gt; with the following contents:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;css&quot;&gt;&lt;span class=&quot;c&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;  *= require_self&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;  *= require blueprint&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;*/&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@import&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;bookstore/*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;This way, all the css.scss on your &lt;em&gt;app/assets/stylesheets/bookstore&lt;/em&gt;
will be compiled into bookstore.css.&lt;/p&gt;

&lt;h3&gt;Why not just use require_tree ./bookstore?&lt;/h3&gt;

&lt;p&gt;You might think that it's better to use require_tree for this, but, since the asset
pipeline compiles each individual css file for development, all of them
would have to be headed with the 'require blueprint' line, else, it will
show you an error saying that it doesn't recognize the mixins on each
file.&lt;/p&gt;

&lt;p&gt;Hope this helps you somehow.&lt;/p&gt;
</content>
   <author>
     <name>David Padilla</name>
     <email>david@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Vagrant to manage multiple dev environments</title>
   <link href="http://blog.crowdint.com/2011/06/21/vagrant.html"/>
   <updated>2011-06-21T00:00:00-07:00</updated>
   <id>http://blog.crowdint.com/2011/06/21/vagrant</id>
   <photo>29612de9aa10447dc2f9ec84cf2ab1b2</photo>
   <content type="html">&lt;p&gt;Lets start rocking like a pro. Installing services (like mysql, redis, mongo) in your own
machine is old fashioned. They won't let you handle different versions, or different
configurations, and most of the time your dev machine isn't the same as your production server.
That's why Vagrant is there for us.&lt;/p&gt;

&lt;p&gt;Vagrant allows you to create different virtualized machines, easy and separated from your
computer internals. So, you can handle all your dev environments (dev, stage, production)
including specific versions of all servers and services.&lt;/p&gt;

&lt;p&gt;For example, I'm currently working on two different projects, and both use
&lt;a href=&quot;http://mongodb.org&quot;&gt;mongodb&lt;/a&gt; as the primary database locked with different
(and incompatible) versions.&lt;/p&gt;

&lt;p&gt;So, I've started using Vagrant to handle that. When I need one version, I just start the box
that contains that server, and I don't mess with my system. That's why Vagrant is so important.&lt;/p&gt;

&lt;p&gt;It uses &lt;a href=&quot;http://virtualbox.org&quot;&gt;Virtualbox&lt;/a&gt; internally, and supports command line, easy ssh access,
easy distribution, shared folders, and other goodies.&lt;/p&gt;

&lt;p&gt;You can even package your own boxes, and distribute it to all of your team members.
One box to rule them all.&lt;/p&gt;

&lt;h3&gt;Installation&lt;/h3&gt;

&lt;p&gt;You will require &lt;em&gt;ruby&lt;/em&gt;, &lt;em&gt;rubygems&lt;/em&gt;, and &lt;em&gt;virtualbox 4&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    gem install vagrant
    vagrant --help
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;Creating a new box&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    mkdir ~/Vagrants;
    &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Vagrants/;
    vagrant box add base http://files.vagrantup.com/lucid32.box;
    vagrant init
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;&lt;em&gt;Notes:&lt;/em&gt;
The &lt;code&gt;vagrant box add&lt;/code&gt; command will download a pre-created ubuntu linux system
(so ~260Mb will be downloaded)
Vagrant uses one configuration file per box, and it's called &lt;code&gt;VagrantFile&lt;/code&gt;.&lt;/p&gt;

&lt;h3&gt;Starting your box&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Vagrants/;
    vagrant up
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;And that's it. Now you have a new Linux environment ready to be configured
and installed with your software, servers, services, etc.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; if you require direct access from the outside to your box, just enable ssh
access editing the &lt;code&gt;VagrantFile&lt;/code&gt;, and uncommenting this: &lt;code&gt;config.vm.network &quot;33.33.33.10&quot;&lt;/code&gt;.
For example, if you're configuring a MySQL instance, your client will connect to 33.33.33.10:3606.&lt;/p&gt;

&lt;h3&gt;Accessing it&lt;/h3&gt;

&lt;p&gt;Now, to install your servers, all you need to do is log in to the box,
do some apt-get install, configure your settings.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;    &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/Vagrants/;
    vagrant ssh
    &lt;span class=&quot;c&quot;&gt;# sudo apt-get install your-stuff-1.2.3&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;Power OFF, suspend, resume..&lt;/h3&gt;

&lt;p&gt;It's as easy as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;vagrant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;halt&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vagrant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suspend&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vagrant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resume&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;vagrant&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destroy&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h2&gt;And that's it&lt;/h2&gt;

&lt;p&gt;Now it's your turn. Try it, learn it, use it, enjoy it.
&lt;em&gt;And, see you next time!&lt;/em&gt;&lt;/p&gt;

&lt;h3&gt;More info&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;More info at: &lt;a href=&quot;http://vagrantup.com&quot;&gt;vagrantup.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;And thanks to &lt;a href=&quot;https://twitter.com/#!/softr8&quot;&gt;Edwin&lt;/a&gt;, for his first Vagrant explanation.&lt;/li&gt;
&lt;/ul&gt;

</content>
   <author>
     <name>Mario Zaizar</name>
     <email>mario@crowdint.com</email>
   </author>
 </entry>
 
 <entry>
   <title>Add Validations to your Ruby classes</title>
   <link href="http://blog.crowdint.com/2011/06/13/add-validations-to-your-ruby-classes.html"/>
   <updated>2011-06-13T00:00:00-07:00</updated>
   <id>http://blog.crowdint.com/2011/06/13/add-validations-to-your-ruby-classes</id>
   <photo>433031df4018635dfb177f4066c37a3b</photo>
   <content type="html">&lt;p&gt;Validations are one of the most useful things in ActiveRecord.
To use them all you have to do is make your class inherit from ActiveRecord::Base,
but, what if you don't want to save the records in a database?
Does it make sense to use ActiveRecord and its overload only for validations?
In case you're wondering, the answer is NO.&lt;/p&gt;

&lt;p&gt;Fortunately, in Rails 3, validations were moved from &lt;em&gt;ActiveRecord&lt;/em&gt; to
&lt;em&gt;ActiveModel&lt;/em&gt;. This give us the ability to use validations in our ruby
classes very easily, even if you don't want to use ActiveRecord.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;# contact.rb&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Contact&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Validations&lt;/span&gt;
      
      &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;
      
      &lt;span class=&quot;n&quot;&gt;validates&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:presence&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
      
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;By including the &lt;em&gt;ActiveModel::Validations&lt;/em&gt; module in our class we are able
to use methods like the following&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Contact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valid?&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;    &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; {:name=&amp;gt;[&amp;quot;can&amp;#39;t be blank&amp;quot;]}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;We can use all of
the &lt;a href=&quot;http://edgeguides.rubyonrails.org/3_0_release_notes.html#validations&quot;&gt;Rails 3 Validations&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Hope this may help you&lt;/p&gt;
</content>
   <author>
     <name>Omar Vargas</name>
     <email>omar@crowdint.com</email>
   </author>
 </entry>
 
 
</feed>
